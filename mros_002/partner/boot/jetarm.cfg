; ホストインタフェース
; ホストパソコンとPARTNER-Jet2を接続するインタフェースの種類やアドレスを設定します。
;  Ex. USB接続の場合(単体)
;	PORT ADDRESS	USB
;  Ex. USB接続の場合(複数台のPARTNER-Jet2が同一のPCに接続されている場合)
;	PORT ADDRESS	USB:本体シリアルナンバー
;	  本体底面記載のシリアルナンバーを記述することで機器の選択ができます。
;
;PORT ADDRESS	USB
;PORT ADDRESS	USB:L0100010
PORT ADDRESS	USB


; Coresight インターフェース設定(CS_CONFIG)
; CoreSight接続の場合のみ、設定可能です。
; ターゲットのデバッグシステムがCoresight の場合に、接続インターフェースを設定します。
;   JTAG-DP[,J<port no.>]   : JTAG デバッグポート接続
;   SW-DP[,J<port no.>]     : シリアルワイヤデバッグポート接続
;               通常のCortexコアの場合は第2パラメータは省略します。
;               ARM7/9/11などレガシーコアをJTAG-AP接続している場合は第2パラメータでポート番号(0-7)を指定します。
; デフォルト(未指定時)は JTAG-DP です。
;
;CS_CONFIG	JTAG-DP
;CS_CONFIG	SW-DP
CS_CONFIG	JTAG-DP


; J_FRQ
; JTAGクロック周波数を設定します。
; 設定可能な周波数範囲は、1K から 70MHz(Model10)/100MHz(Model20)です。
; 周波数のほかに、オプションでTDO信号のサンプルタイミングの指定もできます。
; サンプルタイミングCPUのTDO信号のサンプルタイミングで、以下の３通りから選択します。
;   Standard:　立下りエッジでサンプルします。通常はこの設定です。(デフォルト値)
;       Fast:  速度と安定性のバランスのとれた設定です。Standardより高速なクロックが使用できます。
;      Turbo:　より高速なクロックで動作する可能性がありますが、動作できない危険もあります。
;       Rise:　立ち上がりエッジでサンプルします。最も安全な設定ですが低速なクロックを設定する必要があります。
; 最初は10MHzのStandardをお奨めします。
;  Ex. 自動設定の場合
;	J_FRQ    AUTO
;       AUTO設定で動作しない場合はマニュアルで遅いクロックを設定してみてください。
;       たとえば、  "J_FREQ  1,Rise"など。
;  Ex. アダプティブモードの場合
;	RTCK信号が配線されている必要があります。JTAGクロック周波数はターゲット
;	の状態に応じて自動追従します。
;	J_FRQ	ADPTX
;  Ex.マニュアル設定
;	J_FRQ	16		... 16MHz
;	J_FRQ	200K,Rise	... 200KHz , ライズモード
;	J_FRQ	50,Fast		... 50MHz , ファストモード
;	J_FRQ	6.6,Standard	... 6.6MHz , スタンダードモード
;	J_FRQ	60,Turbo	... 60MHz , ターボモード
;J_FRQ	AUTO
;J_FRQ	ADPTX
;J_FRQ	60,Turbo
;J_FRQ	45,Fast
;J_FRQ	16
;J_FRQ	8
;J_FRQ	1
;J_FRQ	200K
J_FRQ	25


; J_VCC
; JTAG信号の電圧を指定します。1.0 〜 3.6Vのいずれかを設定します。
; ターゲットCPUのJTAG端子のI/O電源電圧を設定してください。
;     J_VCC volt[,{vtref|vsup}[,{vtref|vsup}]]
;   第２パラメータはターゲット電源を監視をするプローブの信号を指定します。(省略時Vtref)
;   JTAGとTRACEの信号レベルが異なる場合に第３パラメータを指定します。
;   この場合、第２パラメータがJTAG電圧で第３パラメータはTRACE電圧です。
;  Ex.
;	J_VCC	3.3		... 3.3V Vtrefピンで電圧監視
;	J_VCC	1.8,vsup	... 1.8V Vsupピンで電圧監視 
;	J_VCC	3.3,vsup,vtref	.., JTAG:3.3V,Vsupピン監視 , TRACE:Vtrefピン監視 
;J_VCC	3.3
;J_VCC	3.0
;J_VCC	2.5
;J_VCC	1.8
J_VCC	3.3


; CPU名とコア番号の指定
; ARM7CPUでキャッシュ&MMU内蔵しているの場合 700 を設定
; ARM7CPUでキャッシュ&MMU内蔵していない場合 70 を設定
; ARM9CPUでキャッシュ&MMU内蔵しているの場合 900 を設定
; ARM9CPUでキャッシュ&MMU内蔵していない場合 90 を設定
; ARM926の場合 926T を設定
; ARM946の場合 946T を設定
; ARM925(OMAP1510/5910)の場合 925Tを設定
; ARM1136の場合 1136を設定
; ARM1156の場合 1156を設定
; ARM1176の場合 1176を設定
; ARM11MPCoreは 11MPCを設定
; ARM11以前のチップでTHUMB対応の場合は、CPUタイプの後ろに 'T' を付加します。
; ARM11以前のチップVFP対応のチップ(ARM1136JF-Sなど）ではCPUタイプの後ろに 'F' を付加します。
; Cortex系で対応しているコア
;   Cortex-A5/7/8/9/15
;   Cortex-R4
;   Cortex-M3/4/0/0+
; 第2パラメータには、マルチコアCPUのコア番号を指定します。各コアに０から通し番号をつけてください。
;
;CPU CORE	70T
;CPU CORE	700T
;CPU CORE	90T
;CPU CORE	900T
;CPU CORE	926T
;CPU CORE	946T
;CPU CORE	1136T
;CPU CORE	11MPC
;CPU CORE	Cortex-A5
;CPU CORE	Cortex-A7
;CPU CORE	Cortex-A8
;CPU CORE	Cortex-A9
;CPU CORE	Cortex-A15
;CPU CORE	Cortex-R4
;CPU CORE	Cortex-M3
;CPU CORE	Cortex-M4
;CPU CORE	Cortex-M0
;CPU CORE	Cortex-M0+
CPU CORE	Cortex-A9,0


; ターゲットCPUのエンディアン
;	BIGエンディアンのときは、 bigを指定します。
;	Littleエンディアンのときは、littleを指定します。
;          (ARMv6以降でBE-8で使用する場合もLittleを指定します。)
; EX.	ENDIAN	LITTLE		... リトルの場合
;	ENDIAN	BIG		... ビッグの場合(BE-32 レガシービッグエンディアン)
;ENDIAN	LITTLE
;ENDIAN	BIG
ENDIAN	LITTLE


; CFG_ARM_L2C
; L2キャッシュコントローラ(ARML210/220など)が内蔵されてCPUでは、
; その物理アドレスを設定します。
; ARML_L2Cが存在しない場合は、この項目の設定は行いません。(コメントアウト)
; ex. 物理アドレス 0xe0000000番地にARML210がある場合
;	CFG_ARM_L2C  e0000000
;CFG_ARM_L2C	e0000000
;CFG_ARM_L2C	1e00A000


; バーチャルリンク(VLINK)の指定です。
;	VLINK	OFF		.. バーチャルリンクを使用しません
;	VLINK	CPU		.. JTAGでバーチャルリンクを使用します
;VLINK	CPU
;VLINK	OFF
VLINK	OFF


; (10)Vlink Macro 高速化
;       VLINK MACRO FAST   ON
;       VLINK MACRO FAST   OFF
;
VLINK MACRO FAST	OFF


; JTAG chain config
; JTAG カスケード接続情報の設定
;	J_CONFIG チップ数,チップ位置(TDO側=0),IR_lenビット数(TDO側),IR_lenビット数(TDI側)
; 単独で接続されている場合(通常)は、設定しません。
;J_CONFIG	3,1,6,8
;J_CONFIG	3,2,8,0
;J_CONFIG	3,1,6,8


; JTAG　ブートwait時間
; デバッガ起動時および初期化時に、リセット出力後デバッグモードに
; 入るまでの待ち時間を秒単位で指定します。
; 通常は、この設定は必要ありません。(デフォルトは 0設定)
; CPUのリセット解除後にユーザプログラムを指定間走らせることで必要な初期化を行い、
; その後デバッガを接続する設定です。
; EX.	J_BOOT_WAIT	2	... 2秒の待ち時間
; EX.	J_BOOT_WAIT	0.5	... 0.5秒の待ち時間
;J_BOOT_WAIT	0
;J_BOOT_WAIT	0.5
;J_BOOT_WAIT	2
J_BOOT_WAIT	0


; リセットディレー(J_RST_DELAY)
; JTAGコネクタからのリセット信号nSRSTをネゲートしたあとJTAGの動作を行うまでの
; 遅延をm秒単位で指定します。 この設定は通常行う必要はありません。
; この設定がない場合は遅延はありません。
; nSRST信号のネゲート後すぐにJTAG動作を行うと問題が発生するCPUやボードで
; 設定してください。(リセット解除後PLL安定待ちが必要な場合など)
; EX. J_RST_DELAY   1000		... ｎSRST信号のネゲート後にJTAG操作の前に1000m秒のディレーを入れます。
J_RST_DELAY	0


; デバッガ起動時のCPUリセット制御(J_NO_RST_BOOT)
; デバッガ起動時にCPUリセットをするかどうかを指定します。
;  EX .. J_NO_RST_BOOT	OFF	... リセットします(ブレーク状態)
;        J_NO_RST_BOOT	ON	... リセットしません(ブレーク状態)
;	 J_NO_RST_BOOT	RUN	... リセットしません(RUN状態)
; RUN指定では、デバッガ起動後もCPUは実行状態です。
; デフォルト(未指定時)はOFFです。
;J_NO_RST_BOOT	OFF
;J_NO_RST_BOOT	ON
;J_NO_RST_BOOT	RUN
J_NO_RST_BOOT	OFF


; ETM機能の制御
;  ex. ETM    ON       ... ETM機能を使用します。(デフォルト)
;  ex. ETM    OFF      ... ETM機能を使用しません。
;  ex. ETM    ETB      ... ARM11でETB内蔵CPUのとき、ETBを使用します。
; ETM機能(リアルタイムとレース)を使用するかどうかを設定します。
; ETMを使用できる条件(Model20 , ARM9シリーズ , ETM内蔵CPUコア)でも
; 強制的にETMを使用しない場合に OFF を設定してください。ETM機能のための
; 端子は一般的の他の目的の端子とマルチプレックスされている場合があります。
; この場合、ETMを有効にするとETM端子とマルチプレックスされた他目的の端子
; のファンクションが使用できません。他目的の機能を使用する場合にETMをOFF
; してください。
; ETM ON,{分周比},{ポートサイズ}[,タイミング]
;  分周比(ARM11のみ)
;    トレースクロック分周比   1,2,3,4
;	 ARM1136(ETM11RV)では 2 or 4　以外は設定禁止です
;	 ARM1176/Cortex-A8(ETM11CS)では 1を設定してください
;  ポートサイズ(ARM11のみ)
;    トレースポートサイズ   4,8
;  タイミング(ON指定時のみ)
;    トレース信号のサンプルタイミングを指定できます。(/P0,/P1,/PDnnn)
;    通常は省略。詳細はハードウェアマニュアル。設定マニュアルを参照。
; 
; Cortex-M0+ でMTB機能を使用する場合は以下の様に設定してください。
;  ETM     MTB,<アドレス>,<サイズ>
;     <アドレス>    ... 内蔵SRAM空間の中でMTBが使用する空間の先頭アドレスを指定します。
;     <サイズ>      ... MTBで使用するメモリのサイズを指定します。
;ETM	OFF
;ETM	ON
;ETM	ON,2,8
;ETM	ON,1,8
;ETM	ETB
;ETM	MTB,20000000,100
ETM	OFF


; トレース用メモリ確保の設定
; ロードさせたプログラムのメモリイメージをホストパソコン上に確保されたメ
; モリに保存するか否かを指定します。
;
; JTAG使用時、ETMの機能によってヒストリ（リアルタイムトレース）を実現
; します。その場合、逆アセンブル表示をする時にターゲットメモリの内容を参
; 照しますが、その参照する場所をターゲットメモリにするか、ホストパソコン
; 上に確保されたメモリにするかを選択します。
;  ex. ALLOC MEMORY	1	... ホストパソコンにコードを保存する
;  ex. ALLOC MEMORY	0	... ホストパソコンにコードを保存しない
; コードを保存しない場合にはターゲットプログラム実行中はヒストリを
; 逆アセンブル表示できませんが、ホストパソコンのメモリ使用量を減らせます。
; ETM機能が無効の場合は、この設定は意味を持ちません。
;ALLOC MEMORY	1
;ALLOC MEMORY	0
ALLOC MEMORY	1


; 強制ブレークの代替方法
; ESCキーなどの強制ブレークが正しくできない場合に、0を設定してください。
; 通常は1を設定します。CPUによっては、0を設定する必要があります。
; このフィールドがコメントの場合は１が設定されます。
; CPUの低電力モードなどが原因でJTAG動作が停止してハングアップする場合は
; 3を設定してください。ハングアップダイアログで、EDBGRQ信号を使ったブレーク
; 要求を出すことで、低電力モードを脱出できる場合があります。
;J_FBRK	1
;J_FBRK	0
J_FBRK	1


; ARM720/920などキャッシュON空間のデバッグをする場合のキャッシュコントロール用
; モニタ空間のアドレス(RAM空間)指定（64バイト使用)
;	JMONITOR ADDRESS	OFF		モニタ未使用(キャッシュON空間のデバッグ不可)
;	JMONITOR ADDRESS	SP		モニタをSP(r13)で示すメモリ空間指定　[ARM9では設定不可]
;	JMONITOR ADDRESS	a0000800	モニタを絶対アドレス(0xa0000800番地)指定
; ARM926/946およびARM11系以降の新しいCPUでは通常OFFを設定してください。
; これらのCPUはOFF設定でキャッシュON空間のデバッグが可能です。
;JMONITOR ADDRESS	OFF
;JMONITOR ADDRESS	SP
;JMONITOR ADDRESS	0x60000100
JMONITOR ADDRESS	OFF


; モニタ(SVC/UND/FIQ)の使用するスタックの初期値
; モニタのワークとしてスタックを使用するようにモニタのソースで設定した場合
; このフィールドでデバッガ起動時の初期スタックを設定できます。
; 通常はこの設定は不要です。
;MONITOR INIT. STACK	c1000000
;MONITOR INIT. STACK	20096000        ;/* Internal RAM */ /* SVC Stack Area in RZ_A1H_sample */


;  FLASH書き込み用ワークRAMエリアの設定(FLASH WORK)
;  書式 FLASH_WORK  アドレス[,サイズ][,/mode]
;  サイズは省略可能(省略時:4K)です
;  modeには、動作モードを設定します
;     ON   .. 起動時ワークRAMを使用
;     OFF  .. 起動時ワークRAMを使用しない
;     AUTO .. 起動時ワークRAMを使用/１回実行するとワーク未使用に変更
;  modeは、zf workコマンドで起動後に変更できます
;  この設定がコメントの場合は、ワークRAMは使用しません
;  初期段階ではコメントでの使用を推奨します(正常なFlash書き込みを確認後に必要なら設定してください）
;FLASH_WORK	80001000


; Flash memory の設定
; FLASH MEMORY	開始アドレス,終了アドレス,<boot_sect>,CPUバス幅[,FLASHバス幅][,オプション情報]
;	boot_sectは、ブートセクタのタイプを設定します。
;	   [SPANSIONタイプ]
;		NO 	... ブートセクタなし
;		TOP	... トップブートタイプ(32K,8K,8K,16K構成)
;		BOTTOM	... ボトムブートタイプ(16K,8K,8K,32K構成)
;		TOP8	... トップブートタイプ(8K x 8構成 MBP29DL32xなど)
;		BOTTOM8	... ボトムブートタイプ(8K x 8構成 MBP29DL32xなど)
;		BOTH8	... 両ブートタイプ(8K x 8 MB29DL640Eなど)
;		BOTH32  ... 両ブート(32Kx4)
;		TOP32   ... トップブートタイプ(32Kx4)のフラッシュメモリ(S29WSxxxW20)
;		BOTTOM32... ボトムブートタイプ(32Kx4)のフラッシュメモリ(S29WSxxxW40)
;	   [Intel/シャープタイプ]
;		NOIS 		... ブートブロックなし(64Kブロック)
;		NOIS128		... ブートブロックなし(128Kブロック 28FxxxJ3/K3など)
;		TOP8IS		... トップブートタイプ(64KxN + 8Kx8構成 28FxxxC3など)
;		BOTTOM8IS	... ボトムブートタイプ(8Kx8 + 64KxN構成 28FxxxC3など)
;		TOP32IS128	... トップブートタイプ(128KxN + 32Kx4構成 28FxxxL30/18など)
;		BOTTOM32IS128	... ボトムブートタイプ(32Kx4 + 128KxN構成 28FxxxL30/18など)
;	   [GENUSIONタイプ]
;		NOGE 	... ブートブロックなし(512Kブロック)
;	CPUバス幅は、CPUのバスサイズを8/16/32で設定
;	FLASHバス幅は、メモリデバイスのバスサイズを8/16で設定
;       ただし、AMD/富士通タイプで16/8bit兼用タイプを8bitで使う場合は9を設定
;       オプション情報は、デバイスの付加情報を設定します。
;    	    /C   : AMD/富士通タイプで連続書き込みサポートのデバイス(MB29DL32x/640など)で指定
;           /B   : バッファライトをサポートしている場合に指定で高速化(バッファサイズ16)
;           /B32 : バッファライトをサポートしている場合に指定で高速化(バッファサイズ32)
;           /S128: ブートブロック以外のノーマルセクタのサイズが128KBの時に設定
;	    /M7ff: コマンド長(A0-A10) 
;	    /U   : Samsung FLASH(K8A5615)などのライトプロテクト解除を自動実行します。(SPANSIONタイプ)
;	    /S4  : セクタのサイズが4KBの時に設定(ブートブロックなし）
;	    /Ax  : アルゴリズムの違い。デバイス固有(FLASH.txtのとおりに設定してください)
;FLASH MEMORY	00000000,03FFFFFF,NO,16,16,/S128
;FLASH MEMORY	04000000,07FFFFFF,NO,16,16,/S128
FLASH MEMORY	18000000,18ffffff,USR
FLASH MEMORY	58000000,58FFFFFF,USR


; FLASH書き込み用ワークRAMエリアの設定(ユーザ定義のFLASH書き込みプログラムを使用する時のみ)
;      FLASH MEMORY     FLASH開始アドレス,FLASH終了アドレス,USR
;                   .
;                   .
;      USR_FLASH_WORK   ワークアドレス,/ワークサイズ[,/D:データとスタックの合計サイズ]
;                        ,/B:バッファサイズ],/S
;                       [,/PAGE={フラッシュの開始アドレス,フラッシュの終了アドレス,ページサイズ,ページ開始番号}[,{...}]]
;           [,モニタファイル名]
;   FLASH MEMORY の メモリタイプに USR を指定すると USR_FLASH_WORK の定義により書き込みを行います。
;   使用するモニタ関数は write_enable()、sect_erase()、write_block()、chip_erase() です。
;   フラッシュメモリの空間は FLASH MEMORY のフィールドで指定します。
;   [例]
;      FLASH MEMORY 00000000,0000ffff,USR
;      USR_FLASH_WORK   88000000,/3000,/D:1000,/B:1000,/S,/PAGE={0,ffff,1000,0},c:\gcc4\sh\r003\usr_flash_work\usrflash_sh.mon
;
;USR_FLASH_WORK	20020000,/D:500,/B:100,/PAGE={18000000,183fffff,40000,0},<PRJ>\usrflash_arm.MON
;USR_FLASH_WORK	20020000,/D:500,/B:100,/S,/PAGE={18000000,1bffffff,40000,0},<PRJ>\usrflash_arm.MON
;USR_FLASH_WORK	20020000,/D:500,/B:100,/S,/PAGE={18000000,1bffffff,10000,0},/PAGE={58000000,5BFFFFFF,10000,0},<PRJ>\usrflash_arm.MON
;USR_FLASH_WORK	20020000,/D:500,/B:100,/S,/PAGE={18000000,18ffffff,10000,0},/PAGE={58000000,58FFFFFF,10000,0},<PRJ>\usrflash_RZA1H_M25Q128.MON
USR_FLASH_WORK	20020000,/D:500,/B:100,/S,/PAGE={18000000,183fffff,10000,0},/PAGE={58000000,583FFFFF,10000,0},<PRJ>\usrflash_RZA1H_MX25L128_1bit.MON


; ＰＡＲＴＮＥＲのコマンドでアクセス可能なメモリ領域（最大２０領域）
; MAP	開始アドレス，終了アドレス
; PARTNERのコマンドでアクセス可能な範囲を開始アドレスと終了アドレスで指定します。
;
;	EX.	MAP	10000000,1000FFFF
;		MAP	FFF00000,FFFFFFFF
MAP	00000000,ffffffff        ;/* All Area */


; ターゲットの初期化を行います。
; 特にバスコントロールユニット(BCU)やDRAMコントローラの初期を行われていないと
; デバッガ起動直後に、正しくメモリにアクセスできません。
; INITフィールドでは、起動時のIOやCPU内部レジスタの初期値を指定できます。
; INITフィールドは以下の書式で最大511個まで記述できます。
; 書式1 .. デバッガ起動時時に動作
;  INIT {CMD},{Adr},{Data}[,{Mask}]
;    "J_NO_RST ON/RUN","J_BOOT_MODE SLIP"が設定されている場合は、この設定は実行されません。
; 書式2 .. ユーザプログラムGo前に動作
;  INIT_GO {CMD},{Adr},{Data}[,{Mask}
; 書式3 .. ユーザプログラムBreak後に動作
;  INIT_BRK {CMD},{Adr},{Data}[,{Mask}
;	CMD : アクセスするデータサイズを指定します。
;               POB =8bit メモリライト
;               POW =16bit メモリライト
;               POD =32bit メモリライト
;               POQ =64bit メモリライト
;               COP = コプロセッサへライト(ARM926以上)
;               CPU = 汎用レジスタ(R0,..,R15,PC,CPSR,SPSR)
;               WAIT=　時間待ち(m秒単位)
;	Adr : メモリのアドレスを指定します。
;	Data: 書き込むデータを指定します。ビット単位でマスク指定可能
;	Mask: マスク値を指定します。Mask値で1が指定されたbitのみ更新されます。
;	      Mask値は省略可能です。省略した場合はすべてのbitが更新されます。
;	      すべてのbitがマスクされた場合、指定されたアドレスの読み出し動作
;	      のみ行われます。
;       CMDにCOPを指定するとコプロセッサレジスタへのライトができます。
;         この場合、{Adr}には、MCR命令のオペランドに相当するパラメータリストを記述します。
;         たとえば MCR P15,0,R0,C15,C2,4   (R0=0x80000003) の動作を行う場合の記述例
;           INIT COP,P15,0,C15,C2,4,80000003
;       CMDにCPUを指定すると汎用レジスタの値をセットできます。(R0,..,R15,PC,CPSR,SPSR)
;           INIT CPU,R0,12345678
;       CMDにWAITを指定するとミリ秒単位の待ち時間を入れることができます。(デフォルト表記16進)。
;         この指定がない場合でも、各INIT行の間には1ミリ秒の時間がはいります。
;         それ以上の時間が必要な場合に記載してください。
;           INIT WAIT,_1000	... 10進数で 1秒待ちを指定
;
;*;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


